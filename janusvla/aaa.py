import torch
from torch import tensor
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np


def extract_first_three(tensors,need_unsqueeze=False):
    x = []
    y = []
    z = []
    for xtensor in tensors:
        
        if need_unsqueeze:
            xtensor = xtensor.cpu().numpy()[0][0]
        else:
            xtensor = xtensor.cpu().numpy()[0][0]
        x.append(xtensor[0])
        y.append(xtensor[1])
        z.append(xtensor[2])
    return np.array(x), np.array(y), np.array(z)
# 完整的张量列表
t =[tensor([[[ 0.1367, -0.1025, -0.0112,  0.1818,  0.0015,  0.0008,  0.5147]]],
       device='cuda:5'), tensor([[[ 0.2857, -0.2175, -0.0251,  0.3747,  0.0032,  0.0017,  1.0639]]],
       device='cuda:5'), tensor([[[ 0.4037, -0.3085, -0.0358,  0.5318,  0.0046,  0.0021,  1.4830]]],
       device='cuda:5'), tensor([[[ 0.5375, -0.4166, -0.0484,  0.7000,  0.0059,  0.0026,  1.9181]]],
       device='cuda:5'), tensor([[[ 0.6840, -0.5338, -0.0634,  0.8841,  0.0073,  0.0034,  2.4157]]],
       device='cuda:5'), tensor([[[ 0.8088, -0.6467, -0.0769,  1.0245,  0.0083,  0.0034,  2.7062]]],
       device='cuda:5'), tensor([[[ 0.9138, -0.7540, -0.0889,  1.1305,  0.0090,  0.0030,  2.8511]]],
       device='cuda:5'), tensor([[[     1.0135,     -0.8590,     -0.0992,      1.2283,      0.0098,
               0.0024,      2.9623]]], device='cuda:5'), tensor([[[     1.1115,     -0.9767,     -0.1146,      1.3109,      0.0105,
               0.0019,      2.9844]]], device='cuda:5'), tensor([[[     1.2098,     -1.0913,     -0.1275,      1.3950,      0.0111,
               0.0012,      3.0174]]], device='cuda:5'), tensor([[[     1.2803,     -1.1803,     -0.1344,      1.4547,      0.0117,
               0.0005,      2.9880]]], device='cuda:5'), tensor([[[     1.3446,     -1.2597,     -0.1359,      1.5119,      0.0122,
              -0.0003,      2.9639]]], device='cuda:5'), tensor([[[     1.3788,     -1.3251,     -0.1432,      1.5295,      0.0119,
              -0.0006,      2.7676]]], device='cuda:5'), tensor([[[     1.3969,     -1.3600,     -0.1267,      1.5558,      0.0119,
              -0.0014,      2.6712]]], device='cuda:5'), tensor([[[     1.4052,     -1.3867,     -0.1133,      1.5689,      0.0117,
              -0.0020,      2.5103]]], device='cuda:5'), tensor([[[     1.4141,     -1.4199,     -0.1053,      1.5764,      0.0112,
              -0.0023,      2.3061]]], device='cuda:5'), tensor([[[ 1.4097, -1.4336, -0.0866,  1.5817,  0.0107, -0.0026,  2.1168]]],
       device='cuda:5'), tensor([[[ 1.4231, -1.4704, -0.0826,  1.5900,  0.0102, -0.0030,  1.9105]]],
       device='cuda:5'), tensor([[[ 1.4265, -1.4857, -0.0634,  1.6052,  0.0101, -0.0037,  1.7823]]],
       device='cuda:5'), tensor([[[ 1.4353, -1.5047, -0.0476,  1.6240,  0.0100, -0.0045,  1.6637]]],
       device='cuda:5'), tensor([[[ 1.4194, -1.4953, -0.0135,  1.6375,  0.0100, -0.0054,  1.5768]]],
       device='cuda:5'), tensor([[[ 1.4159, -1.4974,  0.0117,  1.6625,  0.0103, -0.0064,  1.5442]]],
       device='cuda:5'), tensor([[[ 1.3885, -1.4774,  0.0457,  1.6838,  0.0108, -0.0074,  1.5542]]],
       device='cuda:5'), tensor([[[ 1.3538, -1.4512,  0.0813,  1.7007,  0.0113, -0.0085,  1.5593]]],
       device='cuda:5'), tensor([[[ 1.3212, -1.4278,  0.1116,  1.7207,  0.0118, -0.0095,  1.5798]]],
       device='cuda:5'), tensor([[[ 1.2934, -1.4105,  0.1349,  1.7438,  0.0125, -0.0105,  1.6090]]],
       device='cuda:5'), tensor([[[ 1.2694, -1.3957,  0.1516,  1.7645,  0.0130, -0.0116,  1.6161]]],
       device='cuda:5'), tensor([[[ 1.2401, -1.3768,  0.1697,  1.7847,  0.0136, -0.0126,  1.6330]]],
       device='cuda:5'), tensor([[[ 1.2171, -1.3637,  0.1872,  1.8073,  0.0142, -0.0136,  1.6484]]],
       device='cuda:5'), tensor([[[ 1.1949, -1.3511,  0.2071,  1.8313,  0.0149, -0.0147,  1.6688]]],
       device='cuda:5'), tensor([[[ 1.1716, -1.3356,  0.2340,  1.8525,  0.0153, -0.0157,  1.6725]]],
       device='cuda:5'), tensor([[[ 1.1659, -1.3354,  0.2525,  1.8792,  0.0158, -0.0168,  1.6633]]],
       device='cuda:5'), tensor([[[ 1.1457, -1.3224,  0.2710,  1.8998,  0.0163, -0.0179,  1.6585]]],
       device='cuda:5'), tensor([[[ 1.1241, -1.3102,  0.2845,  1.9200,  0.0168, -0.0189,  1.6573]]],
       device='cuda:5'), tensor([[[ 1.1014, -1.2955,  0.2977,  1.9388,  0.0172, -0.0200,  1.6508]]],
       device='cuda:5'), tensor([[[ 1.0689, -1.2730,  0.3143,  1.9554,  0.0178, -0.0210,  1.6560]]],
       device='cuda:5'), tensor([[[ 1.0575, -1.2697,  0.3219,  1.9802,  0.0184, -0.0221,  1.6568]]],
       device='cuda:5'), tensor([[[ 1.0350, -1.2576,  0.3368,  2.0021,  0.0190, -0.0231,  1.6679]]],
       device='cuda:5'), tensor([[[ 1.0083, -1.2420,  0.3533,  2.0233,  0.0196, -0.0241,  1.6853]]],
       device='cuda:5'), tensor([[[ 0.9927, -1.2344,  0.3722,  2.0476,  0.0201, -0.0252,  1.6891]]],
       device='cuda:5'), tensor([[[ 0.9750, -1.2261,  0.3855,  2.0712,  0.0207, -0.0262,  1.6975]]],
       device='cuda:5'), tensor([[[ 0.9481, -1.2085,  0.4079,  2.0924,  0.0212, -0.0272,  1.7127]]],
       device='cuda:5'), tensor([[[ 0.9270, -1.1974,  0.4229,  2.1169,  0.0219, -0.0282,  1.7346]]],
       device='cuda:5'), tensor([[[ 0.9048, -1.1858,  0.4344,  2.1388,  0.0225, -0.0293,  1.7457]]],
       device='cuda:5'), tensor([[[ 0.8805, -1.1722,  0.4486,  2.1609,  0.0231, -0.0303,  1.7621]]],
       device='cuda:5'), tensor([[[ 0.8579, -1.1594,  0.4642,  2.1835,  0.0237, -0.0313,  1.7764]]],
       device='cuda:5'), tensor([[[ 0.8428, -1.1529,  0.4833,  2.2099,  0.0243, -0.0323,  1.7921]]],
       device='cuda:5'), tensor([[[ 0.8134, -1.1363,  0.4962,  2.2307,  0.0249, -0.0333,  1.8148]]],
       device='cuda:5'), tensor([[[ 0.7851, -1.1209,  0.5081,  2.2526,  0.0256, -0.0343,  1.8418]]],
       device='cuda:5')]
t2=[tensor([[[     2.5034,     -0.0014,      0.2000,      1.8000,      0.0000,
               0.9000,      6.2700]]]), tensor([[[     2.5579,     -0.0247,      0.1846,      1.8000,      0.0000,
               0.9000,      7.4700]]]), tensor([[[     2.6273,     -0.0552,      0.1659,      1.8000,      0.0000,
               0.9000,      7.7600]]]), tensor([[[     2.8962,     -0.1912,      0.1518,      1.8000,      0.0000,
               0.9000,      7.9500]]]), tensor([[[     3.0506,     -0.2863,      0.1528,      1.8000,      0.0001,
               0.9000,      7.9600]]]), tensor([[[     3.4029,     -0.5541,      0.1492,      1.7999,      0.0001,
               0.9000,      7.9600]]]), tensor([[[     3.5807,     -0.7118,      0.1477,      1.7999,      0.0001,
               0.9000,      7.9600]]]), tensor([[[     3.9135,     -1.0496,      0.1499,      1.7998,      0.0000,
               0.9000,      7.9600]]]), tensor([[[     4.0649,     -1.2020,      0.1511,      1.7997,      0.0000,
               0.9000,      7.9600]]]), tensor([[[     4.3398,     -1.5391,      0.1504,      1.7997,      0.0000,
               0.9000,      7.9600]]]), tensor([[[     4.4556,     -1.7133,      0.1496,      1.7997,     -0.0000,
               0.9000,      7.9600]]]), tensor([[[     4.5493,     -2.0247,      0.1494,      1.7997,     -0.0000,
               0.9000,      7.9600]]]), tensor([[[     4.5849,     -2.1223,      0.1497,      1.7997,     -0.0000,
               0.9000,      7.9600]]]), tensor([[[     4.6641,     -2.1935,      0.1505,      1.7997,     -0.0000,
               0.9000,      7.3500]]]), tensor([[[     4.7027,     -2.1724,      0.1503,      1.7997,     -0.0000,
               0.9000,      6.1400]]]), tensor([[[     4.7224,     -2.1233,      0.1499,      1.7997,     -0.0000,
               0.9000,      4.9300]]]), tensor([[[     4.7256,     -2.0936,      0.1499,      1.7997,     -0.0000,
               0.9000,      3.7300]]]), tensor([[[     4.7221,     -2.1031,      0.1500,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.6845,     -2.1016,      0.2032,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.6166,     -2.0871,      0.2942,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.4684,     -2.0579,      0.4797,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.4102,     -2.0445,      0.5736,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.3450,     -2.0022,      0.7629,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.3083,     -1.9788,      0.8532,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2488,     -1.9161,      1.0330,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2352,     -1.8768,      1.1116,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2295,     -1.8099,      1.2579,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2325,     -1.7890,      1.3015,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2486,     -1.7507,      1.3569,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2694,     -1.7320,      1.3858,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2762,     -1.7333,      1.4308,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2677,     -1.7394,      1.4454,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2442,     -1.7477,      1.4658,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2341,     -1.7568,      1.4737,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2521,     -1.7976,      1.4827,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2554,     -1.8069,      1.4859,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2578,     -1.8045,      1.5015,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2543,     -1.8074,      1.5106,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2343,     -1.8271,      1.5251,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2257,     -1.8425,      1.5296,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2103,     -1.8634,      1.5387,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.1992,     -1.8631,      1.5404,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2146,     -1.8758,      1.5542,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2166,     -1.8834,      1.5636,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2148,     -1.9106,      1.5711,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2129,     -1.9272,      1.5724,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2236,     -1.9503,      1.5802,      1.7997,     -0.0000,
               0.9000,      3.4300]]]), tensor([[[     4.2224,     -1.9655,      1.5867,      1.7997,     -0.0000,
               0.9000,      3.4400]]]), tensor([[[     4.2090,     -1.9819,      1.6019,      1.7997,     -0.0000,
               0.9000,      3.4400]]])]
for i in range(1,len(t)):
    t[i]+=(t2[0].to("cuda:5")-t[0])
x1, y1, z1 = extract_first_three(t,True)
x2, y2, z2 = extract_first_three(t2,True)

# 创建三维图
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# 绘制第一组数据，颜色设为红色
ax.scatter(x1, y1, z1, c='r', label='predicted')

# 绘制第二组数据，颜色设为蓝色
ax.scatter(x2, y2, z2, c='b', label='original')

# 设置坐标轴标签
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# 添加图例
ax.legend()

# 保存图像为 plot.png
plt.savefig('plot11xx.png')

# 关闭图形对象
plt.close(fig)
    